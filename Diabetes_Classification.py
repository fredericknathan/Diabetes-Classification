# -*- coding: utf-8 -*-
"""RM_Kelompok_5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xSu5pmU10P8NlZzSqWFj0tlGGJwJ7DHV

# Import Libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.svm import SVC
from xgboost import XGBClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report
from sklearn.model_selection import train_test_split
from sklearn.metrics import f1_score, accuracy_score, precision_score, recall_score
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from sklearn.utils import resample

!mkdir ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d uciml/pima-indians-diabetes-database
!unzip pima-indians-diabetes-database.zip

"""# Describe Dataset"""

df = pd.read_csv('/content/diabetes.csv')

df

df.describe()

"""## Replace zeroes with null"""

df[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']] = df[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']].replace(0,np.NaN)

df.isnull().sum()

"""## Histogram BEFORE cleaning"""

p = df.hist(figsize = (10,10), yrot=90)

"""# Data Cleaning

## Replace null with mean
"""

glucose_mean = df['Glucose'].mean(axis = 0, skipna = True)
blood_mean = df['BloodPressure'].mean(axis = 0, skipna = True)
skin_mean = df['SkinThickness'].mean(axis = 0, skipna = True)
insulin_mean = df['Insulin'].mean(axis = 0, skipna = True)
bmi_mean = df['BMI'].mean(axis = 0, skipna = True)

print(glucose_mean)
print(blood_mean)
print(skin_mean)
print(insulin_mean)
print(bmi_mean)

df["Glucose"] = df["Glucose"].apply(lambda x: glucose_mean if pd.isnull(x) else x)
df["BloodPressure"] = df["BloodPressure"].apply(lambda x: blood_mean if pd.isnull(x) else x)
df["SkinThickness"] = df["SkinThickness"].apply(lambda x: skin_mean if pd.isnull(x) else x)
df["Insulin"] = df["Insulin"].apply(lambda x: insulin_mean if pd.isnull(x) else x)
df["BMI"] = df["BMI"].apply(lambda x: bmi_mean if pd.isnull(x) else x)

df

"""## Upscaling the "outcome" feature"""

sns.countplot(x = df['Outcome'])
df['Outcome'].value_counts()

data_major = df[(df['Outcome']==0)]
data_minor = df[(df['Outcome']==1)]
upsample = resample(data_minor, replace = True, n_samples = 500, random_state= 42)
df = pd.concat([upsample, data_major])

sns.countplot(x = df['Outcome'])
df['Outcome'].value_counts()

df.describe()

"""## Histogram AFTER cleaning"""

p = df.hist(figsize = (10,10))

"""# Modeling"""

X = df.drop('Outcome', axis=1)
y = df['Outcome']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

"""## Machine Learning Models

### KNN
"""

knn = KNeighborsClassifier(n_neighbors=3) # both 2 and 3 has the same accuracy 0.8
knn.fit(X_train, y_train)
knn_pred = knn.predict(X_test)
knn_acc = accuracy_score(y_test, knn_pred)

print('KNN Accuracy:', knn_acc)
print(classification_report(y_test, knn_pred))

import seaborn as sns
from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt

confusion = confusion_matrix(y_test, knn_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(confusion, annot=True, cmap='Blues', fmt='g')

plt.title('Confusion Matrix - KNN')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()

"""### XGBoost"""

xgb = XGBClassifier()
xgb.fit(X_train, y_train)
xgb_pred = xgb.predict(X_test)
xgb_acc = accuracy_score(y_test, xgb_pred)

print('XGBoost Accuracy:', xgb_acc)
print(classification_report(y_test, xgb_pred))

confusion = confusion_matrix(y_test, xgb_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(confusion, annot=True, cmap='Blues', fmt='g')

plt.title('Confusion Matrix - XGBoost')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()

"""### Random Forest"""

rf = RandomForestClassifier()
rf.fit(X_train, y_train)
rf_pred = rf.predict(X_test)
rf_acc = accuracy_score(y_test, rf_pred)

print('Random Forest Accuracy:', rf_acc)
print(classification_report(y_test, rf_pred))

confusion = confusion_matrix(y_test, rf_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(confusion, annot=True, cmap='Blues', fmt='g')

plt.title('Confusion Matrix - Random Forest')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()

"""### SVM"""

svm = SVC()
svm.fit(X_train, y_train)
svm_pred = svm.predict(X_test)
svm_acc = accuracy_score(y_test, svm_pred)

print('SVM Accuracy:', svm_acc)
print(classification_report(y_test, svm_pred))

confusion = confusion_matrix(y_test, svm_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(confusion, annot=True, cmap='Blues', fmt='g')

plt.title('Confusion Matrix - SVM')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()